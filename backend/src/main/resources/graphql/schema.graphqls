scalar LocalDateTime

type Mutation{
    saveUser(userRequest: UserRequest): CustomResponse
    updateUser(id: ID!, userRequest: UserRequest!): CustomResponse
    deleteUser(id: ID!): CustomResponse

    saveCustomer(customerRequest: CustomerRequest): CustomResponse
    updateCustomer(id: ID!, customerRequest: CustomerRequest!): CustomResponse
    deleteCustomer(id: ID!): CustomResponse

    saveShippingRequest(shippingRequestRequest: ShippingRequestRequest): CustomResponse
    updateShippingRequest(shippingRequestRequest: ShippingRequestRequest): CustomResponse
    deleteShippingRequest(id: ID!): CustomResponse

    savePackage(packageRequest: PackageRequest): Package
    updatePackage(id: ID!, packageRequest: PackageRequest): Package
    deletePackage(id: ID!): CustomResponse
}
# All available queries
type Query {
    users: [User]
    user(id: ID): User
    authenticate(userRequest: UserRequest): Int

    customers: [Customer]
    customer(id: ID): Customer
}

type CustomResponse {
    success: Boolean
    message: String
}

type User {
    user: ID
    firstname: String
    lastname: String
    username: String
    password: String
    mail: String
    document: Int
}

input UserRequest {
    firstname: String
    lastname: String
    username: String!
    password: String!
    mail: String
    document: Int
}

type Customer {
    customerid: ID
    firstname: String
    lastname: String
    document: String
    address: String
}

input CustomerRequest {
    firstname: String!
    lastname: String!
    address: String
    document: String!
}

# RouteMap ------------------------------------------------------------
type RouteMap {
    routeMapId: ID
    state: EShippingState
    payloadVolume: Float
    startDate: LocalDateTime
    price: Float
    driver: Driver
    truck: Truck
    trailer: Trailer
    packages: [Package]
}

# Trailer ------------------------------------------------------------
type Trailer {
    trailerId: ID
    weight: Float
    payloadWeight: Float
    registration: String
    available: Boolean
    park: Park
}

# Park ------------------------------------------------------------
type Park {
    parkId: ID
    city: City
    trailers: [Trailer]
}

# ShippingRequest ------------------------------------------------------------
type ShippingRequest {
    requestId: ID
    price: Float
    state: EShippingState
    requestDate: LocalDateTime
    cityFrom: City
    cityTo: City 
    customer: Customer
    packages: [Package]
}

input ShippingRequestRequest {
    requestId: ID
    price: Float
    state: EShippingState
    requestDate: LocalDateTime
    cityFromId: ID
    cityToId: ID
    customerId: ID
    packages: [PackageRequest]
}

enum EShippingState {
    ORDERED
    PENDING
    SHIPPED
    DELIVERED
}

# Package ------------------------------------------------------------
type Package {
    packageid: ID
    weight: Float
    size: Float
    price: Float
    state: EShippingState
    shippingRequest: ShippingRequest
    cityTo: Int
    shippingRequestID: Int
    routeMap: RouteMap
    feePricing: Fee
    recipientDocument: String
    recipientFirstName: String
    feeCoefficient: Float 
}

input PackageRequest {
    weight: Float
    size: Float
    price: Float
    state: EShippingState
    requestId: ID
    routeMapId: ID
    feePricingId: ID
    recipientDocument: String!
    recipientFirstName: String!
    cityFeeCoefficient: Float 
}

# Driver ------------------------------------------------------------
type Driver {
    driverId: ID
    firstname: String
    lastname: String
    document: Int
    address: String
    province: String
    city: String
    phone: String
    particular:Boolean
    available: Boolean
    feePayments: [Fee]
    trucks: [Truck]
    currentcity: City
}

input DriverRequest{
    driverId: ID
    firstname: String!
    lastname: String!
    document: Int!
    address: String
    province: String
    city: String
    phone: String!
    available: Boolean
    trucks: [TruckRequest]
    currentcityId: Int!
}




# Fee ------------------------------------------------------------
enum FeeType {
    PAYMENT
    PRICING
}


type Fee {
    feeId: ID
    kgprice: Float
    kmprice: Float
    cm3price: Float
    registrationDate: LocalDateTime
    endDate:LocalDateTime
    particular: Boolean
    feeType: FeeType
}

input FeePaymentRequest {
    feeId: ID
    driverId: ID
    kgprice: Float
    kmprice: Float
}




# Truck ------------------------------------------------------------
type Truck{
    truckId: ID
    driver: Driver
    registrationDate: LocalDateTime
    registration: String
    maxweight: Float
    available: Boolean
    city: City
}

input TruckRequest{
    truckId: ID
    driverId: ID
    registration: String
    maxweight: Float
    available: Boolean
    cityId: ID
}


# City ------------------------------------------------------------
type City {
    cityId: ID
    name: String
}