type Mutation{
    saveUser(userRequest: UserRequest): CustomResponse
    updateUser(id: ID!, userRequest: UserRequest!): CustomResponse
    deleteUser(id: ID!): CustomResponse

    saveCustomer(customerRequest: CustomerRequest): CustomResponse
    updateCustomer(id: ID!, customerRequest: CustomerRequest!): CustomResponse
    deleteCustomer(id: ID!): CustomResponse
}
# All available queries
type Query {
    users: [User]
    user(id: ID): User
    authenticate(userRequest: UserRequest): Int

    customers: [Customer]
    customer(id: ID): Customer
}

type CustomResponse {
    success: Boolean
    message: String
}

type User {
    user: ID
    firstname: String
    lastname: String
    username: String
    password: String
    mail: String
    document: Int
}

input UserRequest {
    firstname: String
    lastname: String
    username: String!
    password: String!
    mail: String
    document: Int
}

type Customer {
    customerid: ID
    firstname: String
    lastname: String
    document: String
    address: String
}

input CustomerRequest {
    firstname: String!
    lastname: String!
    address: String
    document: String!
}

type RouteMap {
    routeMapId: ID
    state: EShippingState
    payloadVolume: Float
    startDate: Date
    price: Float
    driver: Driver
    truck: Truck
    trailer: Trailer
    packages: [Package]
}

type ShippingRequest {
    requestId: ID
    price: Float
    state: EShippingState
    requesDate: Date
    cityFrom: City
    cityTo: City 
    customer: Customer
    packages: [Package]
}

enum EShippingState {
    ORDERED
    PENDING
    SHIPPED
    DELIVERED
}

type Package {
    packageid: ID
    weight: Float
    size: Float
    price: Float
    state: EShippingState
    shippingRequest: ShippingRequest
    cityTo: Int
    shippingRequestID: Int
    routeMap: RouteMap
    feePricing: Fee
    recipientDocument: String
    recipientFirstName: String
    feeCoefficient: Float 
}

input PackageRequest {
    weight: Float
    size: Float
    price: Float
    state: Int!
    requestId: Int!
    routeMapId: Int!
    feePricingId: Int!
    recipientDocument: String!
    recipientFirstName: String!
    cityFeeCoefficient: Float 
}